unit Unit_DmDados;

interface

uses
  SysUtils, Classes, DB, DBClient;

type
  Tdm_Padrao = class(TDataModule)
    dSetPedido: TClientDataSet;
    dSourcePedido: TDataSource;
    dSetPedidoCD_PEDIDO: TIntegerField;
    dSetPedidoNM_CLIENTE: TStringField;
    dSetPedidoDS_ENDERECO: TStringField;
    dSetPedidoDS_CIDADE: TStringField;
    dSetPedidoDS_UF: TStringField;
    dSetPedidoVL_VALOR: TFloatField;
    dSetItemPedido: TClientDataSet;
    dSourceItem: TDataSource;
    dSetItemPedidoCD_PEDIDO: TIntegerField;
    dSetItemPedidoCD_ITEMPEDIDO: TIntegerField;
    dSetItemPedidoDS_PRODUTO: TStringField;
    dSetItemPedidoNR_QUANTIDADE: TFloatField;
    dSetItemPedidoVL_VALORUNITARIO: TFloatField;
    dSetItemPedidoVL_VALORTOTAL: TFloatField;
    dSetPedidoVL_ACRESDESC: TFloatField;
    dSetPedidoST_ACRESDESC: TStringField;
    procedure dSetItemPedidoBeforePost(DataSet: TDataSet);
    procedure dSetItemPedidoAfterOpen(DataSet: TDataSet);
    procedure DataModuleCreate(Sender: TObject);
    procedure dSetItemPedidoAfterPost(DataSet: TDataSet);
    procedure dSetPedidoAfterPost(DataSet: TDataSet);
  private
    { Private declarations }

  public
    { Public declarations }
    contadorItem : Integer;
    procedure atualizadaSaldoVenda;
  end;

var
  dm_Padrao: Tdm_Padrao;


implementation

uses
     Unit_NewPedido, Unit_Pedidos;

{$R *.dfm}

procedure Tdm_Padrao.dSetItemPedidoBeforePost(DataSet: TDataSet);
begin
if dSetPedido.State = dsEdit then
begin
     dSetPedido.Post;
end;

//Adiciona id do pedido no item
if dSetPedidoCD_PEDIDO.AsInteger > 0 then
begin
     dSetItemPedidoCD_PEDIDO.AsInteger := dSetPedidoCD_PEDIDO.AsInteger;
end;

//Adiciona id do item sempre começando do 1 // reseta no evento onClose
dSetItemPedidoCD_ITEMPEDIDO.AsInteger := contadorItem;
contadorItem := contadorItem + 1;

//Calcula Total do item
dSetItemPedidoVL_VALORTOTAL.AsFloat := dSetItemPedidoNR_QUANTIDADE.AsFloat * dSetItemPedidoVL_VALORUNITARIO.AsFloat;
end;

//******************************************************************************
procedure Tdm_Padrao.dSetItemPedidoAfterOpen(DataSet: TDataSet);
begin
if dSetPedidoCD_PEDIDO.AsInteger > 0 then
begin
     dSetItemPedido.Filter := 'CD_PEDIDO = ' + dSetPedidoCD_PEDIDO.AsString;
     dSetItemPedido.Filtered := True;
end;
end;

//******************************************************************************
procedure Tdm_Padrao.DataModuleCreate(Sender: TObject);
begin
//Serve para reiniciar a contagem dos itens quando cria um novo pedido.
contadorItem := 1;
end;

//******************************************************************************
procedure Tdm_Padrao.dSetItemPedidoAfterPost(DataSet: TDataSet);
begin
//Verifica se esta sendo inserido um pedido
if dSetItemPedidoDS_PRODUTO.AsString = '' then
     dSetItemPedido.Delete;

// Atualizar Valor total do pedido


atualizadaSaldoVenda;

dSetItemPedido.IndexFieldNames := 'CD_ITEMPEDIDO';

dSetPedido.Post;
end;
procedure Tdm_Padrao.dSetPedidoAfterPost(DataSet: TDataSet);
begin
if trim(dSetPedidoNM_CLIENTE.AsString) = '' then
   dSetPedido.Delete;
end;

//******************************************************************************
procedure Tdm_Padrao.atualizadaSaldoVenda;
var
lvValorVenda : Real;
begin
lvValorVenda := 0;
dSetItemPedido.First;
while not dSetItemPedido.Eof do
begin
     lvValorVenda := lvValorVenda + dSetItemPedidoVL_VALORTOTAL.AsFloat;
     dSetItemPedido.Next;
end;

if dSetPedido.State <> dsEdit then
begin
     dSetPedido.Edit;
end;

dSetPedidoVL_VALOR.AsFloat := lvValorVenda;
end;

//******************************************************************************
end.
